// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/proto/currency.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrencyApiClient is the client API for CurrencyApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyApiClient interface {
	GetCurrency(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (CurrencyApi_GetCurrencyClient, error)
}

type currencyApiClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyApiClient(cc grpc.ClientConnInterface) CurrencyApiClient {
	return &currencyApiClient{cc}
}

func (c *currencyApiClient) GetCurrency(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (CurrencyApi_GetCurrencyClient, error) {
	stream, err := c.cc.NewStream(ctx, &CurrencyApi_ServiceDesc.Streams[0], "/currency.CurrencyApi/GetCurrency", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyApiGetCurrencyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CurrencyApi_GetCurrencyClient interface {
	Recv() (*CurrencyResponse, error)
	grpc.ClientStream
}

type currencyApiGetCurrencyClient struct {
	grpc.ClientStream
}

func (x *currencyApiGetCurrencyClient) Recv() (*CurrencyResponse, error) {
	m := new(CurrencyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CurrencyApiServer is the server API for CurrencyApi service.
// All implementations must embed UnimplementedCurrencyApiServer
// for forward compatibility
type CurrencyApiServer interface {
	GetCurrency(*CurrencyRequest, CurrencyApi_GetCurrencyServer) error
	mustEmbedUnimplementedCurrencyApiServer()
}

// UnimplementedCurrencyApiServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyApiServer struct {
}

func (UnimplementedCurrencyApiServer) GetCurrency(*CurrencyRequest, CurrencyApi_GetCurrencyServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCurrency not implemented")
}
func (UnimplementedCurrencyApiServer) mustEmbedUnimplementedCurrencyApiServer() {}

// UnsafeCurrencyApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyApiServer will
// result in compilation errors.
type UnsafeCurrencyApiServer interface {
	mustEmbedUnimplementedCurrencyApiServer()
}

func RegisterCurrencyApiServer(s grpc.ServiceRegistrar, srv CurrencyApiServer) {
	s.RegisterService(&CurrencyApi_ServiceDesc, srv)
}

func _CurrencyApi_GetCurrency_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CurrencyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyApiServer).GetCurrency(m, &currencyApiGetCurrencyServer{stream})
}

type CurrencyApi_GetCurrencyServer interface {
	Send(*CurrencyResponse) error
	grpc.ServerStream
}

type currencyApiGetCurrencyServer struct {
	grpc.ServerStream
}

func (x *currencyApiGetCurrencyServer) Send(m *CurrencyResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CurrencyApi_ServiceDesc is the grpc.ServiceDesc for CurrencyApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "currency.CurrencyApi",
	HandlerType: (*CurrencyApiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCurrency",
			Handler:       _CurrencyApi_GetCurrency_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/currency.proto",
}
